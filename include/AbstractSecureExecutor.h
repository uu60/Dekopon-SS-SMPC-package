//
// Created by 杜建璋 on 2024/7/7.
//

#ifndef MPC_PACKAGE_SECUREEXECUTOR_H
#define MPC_PACKAGE_SECUREEXECUTOR_H

#include <cstdint>
#include <string>
#include <set>
#include "./utils/System.h"

class AbstractSecureExecutor {
public:
    static const int16_t _preservedObjTags;
    static std::atomic_int16_t _currentObjTag;
    // result
    int64_t _result{};
    // unreconstructed share
    int64_t _zi{};
    // _l
    int _l{};

protected:
    /*
     * Whole tag for each message:
     * +-------------------------- 32 bits -------------------------------+
     * |        object tag (16 bits)     |      message tag (16 bits)     |
     * +---------------------------------+--------------------------------+
     * Object tag should be generated by a static method in each class.
     * Message tag should be generated by each executor object.
     *
     * By this design, different executor object can run in parallel.
     * However, when objects run in parallel, specific object tag should be assigned in certain sequence.
     * Tag assignment process must NOT be executed in parallel in case wrong sequence of generation.
     *
     * MPC system should record a static number (atomic int may be needed) of created objects
     * in case that the assigned object tags conflict. (This Package is not responsible for conflict control)
     */
    // object tag
    int16_t _objTag{};
    // message tag
    int16_t _startMsgTag{};
    std::atomic_int16_t _currentMsgTag{};

public:
    /**
     * Executors' constructor should be responsible for data preparation.
     */
    virtual ~AbstractSecureExecutor() = default;

    explicit AbstractSecureExecutor(int l, int16_t objTag, int16_t msgTagOffset) : _l(l), _objTag(objTag),
        _startMsgTag(msgTagOffset), _currentMsgTag(msgTagOffset) {
    }

    // secret sharing process
    [[deprecated("This function should not be called.")]]
    virtual AbstractSecureExecutor *execute() = 0;

    [[deprecated("This function should not be called.")]]
    virtual AbstractSecureExecutor *reconstruct(int clientRank) = 0;

    std::vector<int16_t> nextMsgTags(int num);

    static std::vector<int16_t> nextObjTags(int num);

protected:
    [[nodiscard]] int64_t ring(int64_t raw) const;

    /**
     * Generate tag string for debug or print.
     * @return Log tag.
     */
    [[deprecated("This function should not be called.")]]
    [[nodiscard]] virtual std::string className() const = 0;

    [[nodiscard]] int buildTag(int16_t msgTag) const;
};

#endif //MPC_PACKAGE_SECUREEXECUTOR_H
